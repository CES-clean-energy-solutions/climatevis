---
description: This document provides complete guidelines for developing marimo notebooks effectively, integrating all essential patterns, conventions, and best practices.
globs:
alwaysApply: false
---

# Marimo Development Guidelines - Comprehensive Rules

This document provides complete guidelines for developing marimo notebooks effectively, integrating all essential patterns, conventions, and best practices.

## üö® CRITICAL DISPLAY RULE - NEVER VIOLATE

**BEFORE writing ANY marimo cell, check:**
1. Are you putting `mo.md()`, `mo.ui.table()`, or ANY display function inside `if`, `try`, `for`, `while`, or `with` blocks?
2. If YES ‚Üí STOP! You must prepare content inside control blocks, then display OUTSIDE them.

**‚úÖ CORRECT Template Pattern:**
```python
@app.cell
def display_example(mo):
    # Prepare content inside control blocks
    if condition:
        content = "success message"
    else:
        content = "error message"

    # Display OUTSIDE control blocks, BEFORE return
    mo.md(content)
    return
```

## Core Marimo Concepts

### Marimo Application Files
- **Marimo Application Files:** All Python files using `@app.cell` decorator are marimo dashboards
- **Interactive Notebook Model:** Reactive notebooks where cells execute based on dependencies, not definition order
- **Frontend Interface:** Event-driven web UI that updates on user interactions
- **Standard Structure:** Include `app.run()` under `if __name__ == "__main__":` guard

### Monorepo Structure and Shared Libraries
- **Shared Libraries:** Common code organized under top-level `lib/` folder
- **Import Pattern:** Modify `sys.path` to include lib directory:
  ```python
  sys.path.insert(0, "./lib")
  from util import util_plotly
  import plots
  ```
- **First-Party Modules:** Treat imports from `lib/` subpackages as local project code

## Cell Function Structure and Naming

### Critical Function Naming Rules
- **ALWAYS name cell functions descriptively** instead of anonymous `_()` functions
- **Use snake_case convention** and describe the cell's purpose
- **Consistent naming patterns** for better organization:

```python
# ‚úÖ GOOD - Descriptive function names
@app.cell
def setup_imports():
    import marimo as mo
    return mo,

@app.cell
def create_input_widgets(mo):
    temperature_slider = mo.ui.slider(0, 100, value=20)
    return temperature_slider,

@app.cell
def process_simulation_data(temperature_slider):
    results = simulate_temperature(temperature_slider.value)
    return results,

@app.cell
def display_results_plot(results, mo):
    plot = create_temperature_plot(results)
    mo.as_html(plot)
    return

# ‚ùå BAD - Anonymous functions
@app.cell
def _():  # What does this cell do?
    return some_data,
```

### Naming Convention Categories
- **`setup_*`**: Initial imports, configuration, constants
- **`create_*_widgets`**: UI widget creation (inputs, controls)
- **`process_*_data`**: Data processing, calculations, transformations
- **`compute_*`**: Heavy computations, simulations, analysis
- **`display_*`**: Visualization, output display, results presentation
- **`handle_*_events`**: Event handlers, callbacks, user interactions
- **`validate_*`**: Input validation, error checking
- **`export_*`**: Data export, file downloads, external outputs

## Display Patterns and Control Flow

### Core Display Rules
- **Display functions must be OUTSIDE control blocks** (`try`, `if`, `for`, `while`, `with`)
- **Last statement before return** displays in UI
- **Return statements are for data passing** between cells, not display

### ‚ùå WRONG Patterns
```python
@app.cell
def broken_display_example(mo):
    try:
        result = some_computation()
        mo.md("‚úÖ Success!")  # WRONG: Inside try block
    except Exception as e:
        mo.md(f"‚ùå Error: {e}")  # WRONG: Inside except block
    return

@app.cell
def broken_conditional_example(mo):
    if condition:
        mo.md("Condition is true")  # WRONG: Inside if block
    return

@app.cell
def broken_loop_example(mo, items):
    for item in items:
        mo.md(f"Processing {item}")  # WRONG: Inside loop
    return
```

### ‚úÖ CORRECT Patterns
```python
@app.cell
def correct_error_handling_example(mo):
    try:
        result = some_computation()
        message = "‚úÖ Success!"
    except Exception as e:
        message = f"‚ùå Error: {e}"

    # Display OUTSIDE control blocks
    mo.md(message)
    return

@app.cell
def correct_conditional_example(mo):
    if condition:
        content = "Condition is true"
    else:
        content = "Condition is false"

    # Display OUTSIDE if/else
    mo.md(content)
    return

@app.cell
def correct_loop_example(mo, items):
    messages = []
    for item in items:
        messages.append(f"Processing {item}")

    # Display OUTSIDE loop
    mo.md("\n".join(messages))
    return
```

### Combined Data Passing and Display
```python
@app.cell
def correct_data_and_display_example(mo, data):
    # Process data
    processed_data = transform(data)

    # Create display content
    display_content = mo.md(f"Processed {len(processed_data)} items")

    # Display in UI with final expression
    display_content
    return processed_data,  # Pass data to other cells
```

## Cell Return Statement Rules - CRITICAL

### üö® ABSOLUTE RULE: Return Statement Placement

**CELL FUNCTIONS:**
- **EXACTLY ONE `return` statement** at the very end of the function
- **NEVER put `return` inside ANY control block** (`if`, `try`, `for`, `while`, `with`)
- **NO EXCEPTIONS** - this rule applies to ALL `@app.cell` functions

**NESTED FUNCTIONS (inside cells):**
- **CAN have multiple `return` statements** as needed
- **CAN have `return` inside control blocks** - this is where complex logic goes

### ‚ùå ILLEGAL Patterns - NEVER DO THIS
```python
# ‚ùå FATAL ERROR - Multiple returns in cell function
@app.cell
def bad_cell_example(inputs):
    if condition:
        return result  # ‚ùå ILLEGAL - return inside if block
    try:
        data = process(inputs)
        return data  # ‚ùå ILLEGAL - return inside try block
    except:
        return None  # ‚ùå ILLEGAL - return inside except block

# ‚ùå FATAL ERROR - Return inside control blocks
@app.cell
def another_bad_example(data):
    for item in data:
        if item.valid:
            return item  # ‚ùå ILLEGAL - return inside for/if
    return None  # Even with one return at end, others are illegal
```

### ‚úÖ CORRECT Patterns - ALWAYS DO THIS
```python
# ‚úÖ CORRECT - Single return at end, logic in nested function
@app.cell
def correct_cell_example(inputs):
    def _process_with_branching():
        if condition:
            return process_option_a(inputs)  # ‚úÖ OK in nested function
        try:
            data = process_option_b(inputs)
            return data  # ‚úÖ OK in nested function
        except Exception as e:
            return f"Error: {e}"  # ‚úÖ OK in nested function

    result = _process_with_branching()
    return result  # ‚úÖ REQUIRED - single return at end

# ‚úÖ CORRECT - Complex logic wrapped in nested function
@app.cell
def correct_error_handling_example(data):
    def _validate_and_process():
        if not data:
            return None, False, "No data provided"
        try:
            processed = expensive_operation(data)
            if processed.is_valid():
                return processed, True, "Success"
            else:
                return None, False, "Validation failed"
        except Exception as e:
            return None, False, f"Processing error: {e}"

    result, success, message = _validate_and_process()
    return result, success, message  # ‚úÖ Single return at end
```

### Memory Aid: "One Return Rule"
- **Cell functions = ONE return only** (at the very end)
- **Nested functions = Multiple returns OK, a normal function**

### Pre-Cell Return Checklist
Before writing ANY `@app.cell` function:
 ‚ùì Will I need multiple returns or returns inside control blocks?
 ‚ùì If YES ‚Üí try to avoid and simplify
 ‚ùì If still YES ‚Üí Create a nested function to handle the complex logic
 ‚ùì Does my cell function have EXACTLY ONE return at the very end?
 ‚ùì Are ALL my returns inside nested functions (not the cell function itself)?

## Variable Management and Namespace

### Critical Variable Rules
- **Underscore Variables are LOCAL ONLY:** Use `_` prefix for temporary/local variables that shouldn't be accessed by other cells
- **Return ALL Variables Needed by Other Cells:** Variables genuinely needed by other cells should be returned normally
- **Avoid Global Namespace Conflicts:** If multiple cells return variables with same name, Marimo throws errors

### Cell checklis for variables;
 ‚ùì Check for any global variables, anything that is declared inside the cell function direct scope is global!
 ‚ùì If conflict - RENAME to avoid, or add _ char to keep it de-scoped


```python
@app.cell
def correct_variable_management_example(raw_data):
    # ‚úÖ GOOD: Temporary variables with underscore (local to cell)
    _temp_df = raw_data.copy()
    _processed = clean_data(_temp_df)
    _intermediate = calculate_metrics(_processed)

    # ‚úÖ GOOD: Variables needed by other cells (global namespace)
    final_results = _intermediate
    summary_stats = create_summary(_intermediate)

    # Return ALL variables other cells need
    return final_results, summary_stats

@app.cell
def reuse_underscore_variables_example(other_data):
    # ‚úÖ GOOD: Can reuse same underscore names (they're local)
    _temp_df = other_data.copy()  # OK to reuse (local)
    _processed = clean_data(_temp_df)  # OK to reuse (local)

    # ‚úÖ GOOD: Different public variable names
    other_results = _processed  # Different from final_results
    return other_results,
```

## UI Widgets and Interactions

### Widget Naming Convention
Use descriptive names with widget type FIRST for better grouping:

```python
# ‚úÖ GOOD - Type first, then purpose
slider_temperature = mo.ui.slider(...)
button_simulation_run = mo.ui.button(...)
dropdown_zone_type = mo.ui.dropdown(...)
number_zone_area = mo.ui.number(...)
checkbox_enable_hvac = mo.ui.checkbox(...)

# ‚ùå BAD - Purpose first (harder to group)
temperature_slider = mo.ui.slider(...)
simulation_run_button = mo.ui.button(...)
```

### Table Widget Requirements (CRITICAL)
**`mo.ui.table()` data MUST be JSON-serializable** - DO NOT pass UI elements directly:

```python
# ‚úÖ CORRECT Table Data Patterns
table_results = mo.ui.table(pandas_dataframe)

table_data = mo.ui.table([
    {"Zone": "Zone 1", "Temperature": 25.0, "Status": "Active"},
    {"Zone": "Zone 2", "Temperature": 23.5, "Status": "Inactive"}
])

# ‚ùå WRONG - Causes JSON Serialization Errors
bad_table = mo.ui.table([
    [mo.md("**Header**"), mo.ui.slider(1, 10)],  # ‚ùå UI elements in table
])

# ‚úÖ ALTERNATIVE for UI Element Grids - Use Layout Components
header_row = mo.hstack([mo.md("**Zone**"), mo.md("**Control**")])
zone_rows = [
    mo.hstack([mo.md(f"**Zone {i+1}**"), mo.ui.number(value=25.0)])
    for i in range(n_zones)
]
ui_grid = mo.vstack([header_row] + zone_rows)
```

## Code Organization Structure

### Standard App Structure
```python
# 1. App Configuration and Imports
@app.cell
def setup_app_config():
    import marimo
    __generated_with = "0.12.0"
    app = marimo.App(width="medium")
    return app,

@app.cell
def setup_core_imports():
    import marimo as mo
    import sys
    return mo, sys

@app.cell
def setup_domain_imports(sys):
    sys.path.insert(0, "/workspaces/microclimate/lib")
    from simulation import heat_balance
    return heat_balance,

# 2. Configuration and Input Widgets
@app.cell
def create_simulation_config_widgets(mo):
    timestep_slider = mo.ui.slider(...)
    return timestep_slider,

# 3. Data Processing and Computation
@app.cell
def process_simulation_parameters(timestep_slider):
    config = create_config(timestep_slider.value)
    return config,

@app.cell
def run_simulation(config, run_button):
    def _run_if_requested():
        if run_button.value:
            results = simulate(config)
            return results, True, None
        return None, False, "Not run"

    results, success, status = _run_if_requested()
    return results, success, status

# 4. Visualization and Display
@app.cell
def display_results_plots(results, success, mo):
    if success and results is not None:
        plot = create_plot(results)
        content = mo.as_html(plot)
    else:
        content = mo.md("No results to display")

    content
    return
```

## Cell Visibility Guidelines

Use `@app.cell(hide_code=True)` appropriately:

```python
# ‚úÖ ALWAYS HIDE - Markdown-only display cells
@app.cell(hide_code=True)
def display_section_header(mo):
    mo.md("## Configuration")
    return

# ‚úÖ ALWAYS HIDE - Pure display cells
@app.cell(hide_code=True)
def display_plot_output(plot, mo):
    mo.as_html(plot)
    return

# ‚úÖ KEEP VISIBLE - Widget creation (users may modify)
@app.cell
def create_input_widgets(mo):
    slider_temp = mo.ui.slider(0, 100, value=20)
    return slider_temp,

# ‚úÖ KEEP VISIBLE - Complex computations
@app.cell
def run_complex_simulation(inputs):
    results = expensive_computation(inputs)
    return results,
```

## Error Handling and Validation

```python
@app.cell
def validate_and_process_inputs(temperature_input, mo):
    def _validate_and_process():
        try:
            if temperature_input.value < -273.15:
                return mo.md("‚ùå Temperature cannot be below absolute zero!"), None, False

            processed_temp = process_temperature(temperature_input.value)
            return mo.md("‚úÖ Temperature processed successfully"), processed_temp, True

        except Exception as e:
            return mo.md(f"‚ùå Processing failed: {str(e)}"), None, False

    message, result, success = _validate_and_process()
    message  # Display message
    return result, success
```

## Custom Plotting Guidelines

### Time Series Plotting with Custom plot_series
**ALWAYS use custom `plots.plot_series()` for time series** instead of raw Plotly:

```python
@app.cell
def create_timeseries_plot(df, ui_dropdown_template, ui_dropdown_paper_size, ui_dropdown_weather_columns, plots):
    """Create time series plot using custom plot_series function"""
    fig_timeseries = plots.plot_series(
        [df[ui_dropdown_weather_columns.value]],
        template_name=ui_dropdown_template.value,
        paper_size=ui_dropdown_paper_size.value,
        y1_axis_title=ui_dropdown_weather_columns.value,
        mode="line"  # Options: "line", "area", "bar", "markers"
    )
    return fig_timeseries,

@app.cell(hide_code=True)
def display_timeseries_plot(fig_timeseries, ui_dropdown_weather_columns, mo):
    """Display with descriptive title"""
    title = f"Annual hourly series for {ui_dropdown_weather_columns.value}"

    components_timeseries = mo.vstack([
        mo.md(f"## {title}"),
        fig_timeseries
    ])
    return components_timeseries,
```

### Plotting Best Practices
- **Series Naming:** Ensure pandas Series have meaningful `.name` attributes
- **Series Attributes:** Use `.attrs` dictionary for metadata:
  ```python
  series.attrs["unit"] = "m/s"
  series.attrs["color"] = "red"
  ```
- **Template Consistency:** Always pass template from UI: `ui_dropdown_template.value`
- **Paper Size Consistency:** Always pass paper size from UI: `ui_dropdown_paper_size.value`
- **Plot Modes:** Choose appropriate mode for data type:
  - `"line"`: Continuous time series (default)
  - `"area"`: Filled area under curve
  - `"bar"`: Discrete/categorical time data
  - `"markers"`: Scatter plot style
  - `"stacked_bar"`: Multiple series as stacked bars

### Specialized Plot Functions
The plots module includes specialized functions beyond plot_series:
- `plots.annual_profile_daily()`: Daily min/mean/max profiles
- `plots.monthly_profiles()`: Monthly average day profiles
- `plots.exceedance()`: Exceedance probability curves
- `plots.annual_heatmap()`: Annual heatmap visualization
- `plots.histogram()`: Histogram plots
- `plots.cumulative_probability()`: Cumulative distribution plots
- `plots.wind_rose()`: Wind rose diagrams

## Performance and Best Practices

### Efficient Cell Organization
- **Minimize cell dependencies:** Avoid unnecessary cross-dependencies
- **Separate concerns:** Keep data processing separate from visualization
- **Cache expensive computations:** Use appropriate caching strategies
- **Lazy evaluation:** Only compute when inputs change

### Memory Management
- **Clear large temporary variables:** Use `del` for large intermediate datasets
- **Efficient data structures:** Choose appropriate data types
- **Stream large datasets:** Don't load everything into memory

## Testing and Debugging

### Debugging Strategies
- **Named functions make debugging easier:** Stack traces show function names
- **Use intermediate variables:** Break complex operations into steps
- **Test cells individually:** Each cell should work independently when possible

```python
@app.cell
def debug_simulation_inputs(temperature_slider, mo):
    """Debug cell to verify input values"""
    debug_info = {
        'temperature': temperature_slider.value,
        'temp_valid': -50 <= temperature_slider.value <= 50
    }

    debug_display = mo.md(f"""
    **Debug Info:**
    - Temperature: {debug_info['temperature']}¬∞C
    - Valid: {debug_info['temp_valid']}
    """)

    debug_display if __debug__ else mo.md("")
    return debug_info,
```

## Documentation Guidelines

### Cell-Level Documentation
```python
@app.cell
def compute_heat_balance_solution(zone_config, weather_data, hvac_system):
    """
    Solves the heat balance equation iteratively for building zone.

    Inputs:
    - zone_config: Zone configuration parameters
    - weather_data: Hourly weather data DataFrame
    - hvac_system: HVAC system configuration

    Returns:
    - solution_results: DataFrame with temperature and load time series
    - convergence_info: Dictionary with solver convergence details
    """
    solver = HeatBalanceSolver(zone_config.thermal_mass)
    solution_results = solver.solve_hourly(weather_data, hvac_system)
    convergence_info = solver.get_convergence_stats()

    return solution_results, convergence_info
```

### App-Level Documentation
- **Add markdown cells** to explain app purpose and usage
- **Section headers** to organize dashboard visually
- **User instructions** for interactive elements

## Common Mistakes to Avoid

### üö® RED FLAGS - NEVER DO THIS
```python
# ‚ùå Display inside control blocks
if condition:
    mo.md("text")  # WRONG

try:
    mo.ui.table(df)  # WRONG
except:
    mo.md("error")  # WRONG

for item in items:
    mo.md(f"item: {item}")  # WRONG

# ‚ùå Multiple returns in cell function
def bad_cell():
    if condition:
        return result  # WRONG
    return default  # WRONG

# ‚ùå UI elements in tables
mo.ui.table([mo.ui.slider(1, 10)])  # WRONG
```

## File Structure Best Practices

### App File Organization
```
Projects/
‚îú‚îÄ‚îÄ Energy_sim/
‚îÇ   ‚îú‚îÄ‚îÄ app_simulation_heat_balance.py      # Main heat balance simulation
‚îÇ   ‚îú‚îÄ‚îÄ app_psychrometric_analysis.py      # Psychrometric charts
‚îÇ   ‚îî‚îÄ‚îÄ app_weather_data_explorer.py       # Weather data visualization
‚îú‚îÄ‚îÄ HVAC_design/
‚îÇ   ‚îú‚îÄ‚îÄ app_load_calculations.py           # Load calculation tool
‚îÇ   ‚îî‚îÄ‚îÄ app_equipment_sizing.py           # Equipment sizing dashboard
```

### Consistent App Structure Template
```python
# Standard app header
import marimo
__generated_with = "0.12.0"
app = marimo.App(width="medium")

# 1. Imports and setup
@app.cell
def setup_imports():
    import marimo as mo
    return mo,

@app.cell
def setup_libraries(mo):
    # Import domain libraries
    return domain_libs,

# 2. Configuration
@app.cell
def create_config_widgets(mo):
    # Configuration UI
    return config_widgets,

# 3. Data processing
@app.cell
def process_data(config_widgets):
    # Main data processing
    return processed_data,

# 4. Visualization
@app.cell
def create_visualizations(processed_data):
    # Generate plots/charts
    return plots,

@app.cell
def display_results(plots, mo):
    # Display final results
    mo.as_html(plots)
    return

# Standard app footer
if __name__ == "__main__":
    app.run()
```

## Pre-Cell Checklist

Before writing ANY marimo cell, verify:
1. ‚ùì Am I putting display functions inside control blocks? ‚Üí If YES, prepare content inside, display outside
2. ‚ùì Is my display function the LAST statement before `return`? ‚Üí If NO, move it
3. ‚ùì Do I have multiple `return` statements? ‚Üí If YES, wrap logic in nested functions
4. ‚ùì Am I using descriptive function names? ‚Üí If NO, rename from `_()` to descriptive name
5. ‚ùì Are my variable names properly prefixed? ‚Üí Use `_` for local/temp, normal names for shared

## Remember: The Golden Rules

1. **Last statement rule:** Display functions must be last statement before `return`
2. **Outside control blocks:** Never put display functions inside `try`, `if`, `for`, `while`, `with`
3. **Prepare then display:** Do computation in control blocks, prepare content, then display outside
4. **Single return only:** Use nested functions for complex logic requiring multiple returns
5. **Descriptive naming:** Always name cell functions descriptively, never use anonymous `_()`
6. **Variable scope:** Use `_` prefix for local/temp variables, return what other cells need

**Use `notebooks/TEMPLATE.py` as starting point for new marimo notebooks.**

Following these patterns ensures marimo notebooks display content correctly and maintain proper reactive behavior.